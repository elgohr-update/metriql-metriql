package com.metriql

import com.fasterxml.jackson.databind.JsonNode
import com.google.common.cache.CacheBuilderSpec
import com.google.common.net.HostAndPort
import com.metriql.services.cache.InMemoryCacheService
import com.metriql.service.model.IModelService
import com.metriql.service.task.TaskExecutorService
import com.metriql.service.task.TaskQueueService
import com.metriql.util.JsonHelper
import com.metriql.warehouse.spi.DataSource
import io.javalin.Javalin
import io.javalin.http.Context
import io.javalin.http.HandlerType
import io.javalin.plugin.json.JavalinJackson
import io.javalin.plugin.openapi.ModelConverterFactory
import io.javalin.plugin.openapi.OpenApiOptions
import io.javalin.plugin.openapi.OpenApiPlugin
import io.javalin.plugin.openapi.dsl.DocumentedParameter
import io.javalin.plugin.openapi.dsl.document
import io.javalin.plugin.openapi.dsl.documented
import io.javalin.plugin.openapi.jackson.JacksonToJsonMapper
import io.javalin.plugin.openapi.ui.ReDocOptions
import io.swagger.v3.core.converter.ModelConverter
import io.swagger.v3.oas.models.info.Info
import org.rakam.server.http.annotations.BodyParam
import org.rakam.server.http.annotations.JsonRequest
import java.lang.reflect.ParameterizedType
import java.util.concurrent.CompletableFuture
import javax.ws.rs.CookieParam
import javax.ws.rs.DELETE
import javax.ws.rs.GET
import javax.ws.rs.HeaderParam
import javax.ws.rs.PATCH
import javax.ws.rs.POST
import javax.ws.rs.PUT
import javax.ws.rs.Path
import javax.ws.rs.QueryParam

object HttpServer {
    fun start(address: HostAndPort, numberOfThreads: Int, isDebug: Boolean, origin: String?, modelService: IModelService, dataSource: DataSource) {
        val applicationInfo = Info()
            .version("1.0")
            .description("My Application")

        JavalinJackson.configure(JsonHelper.getMapper())
        val app = Javalin.create { config ->
            config.showJavalinBanner = false

            if (origin != null) {
                config.enableCorsForOrigin(origin)
            } else {
                config.enableCorsForAllOrigins()
            }

            config.registerPlugin(
                OpenApiPlugin(
                    OpenApiOptions(applicationInfo)
                        .toJsonMapper(JacksonToJsonMapper(JsonHelper.getMapper()))
                        .modelConverterFactory(object : ModelConverterFactory {
                            override fun create(): ModelConverter {
                                return MetriqlModelConverter()
                            }
                        })
                        .reDoc(ReDocOptions("/redoc").title("My ReDoc Documentation"))
                        .path("/swagger-docs")
                )
            )
        }.start(address.host, address.port)


        val taskExecutor = TaskExecutorService()
        val taskQueueService = TaskQueueService(taskExecutor)

        val cacheConfig = CacheBuilderSpec.parse("")
        val apiService = QueryHttpService(modelService, dataSource, InMemoryCacheService(cacheConfig), taskQueueService)

        val serviceClass = apiService.javaClass
        val mainPath = serviceClass.getAnnotation(Path::class.java) ?: throw IllegalStateException()
        for (method in serviceClass.methods) {
            val subPath = method.getAnnotation(Path::class.java) ?: continue
            val httpMethod = if (method.isAnnotationPresent(POST::class.java) || method.isAnnotationPresent(JsonRequest::class.java)) {
                HandlerType.POST
            } else if (method.isAnnotationPresent(GET::class.java)) {
                HandlerType.GET
            } else if (method.isAnnotationPresent(PUT::class.java)) {
                HandlerType.PUT
            } else if (method.isAnnotationPresent(PATCH::class.java)) {
                HandlerType.PATCH
            } else if (method.isAnnotationPresent(DELETE::class.java)) {
                HandlerType.DELETE
            } else {
                HandlerType.GET
            }

            val mapper = JsonHelper.getMapper()

            val openApiDoc = document()

            val parameters = method.parameters.map {
                val contextParam : ((Context, JsonNode) -> Any?)? = if(it.type == Context::class.java) { ctx, _ -> ctx } else null
                val headerParam : ((Context, JsonNode) -> Any?)? = it.getAnnotation(HeaderParam::class.java)?.value?.let { name ->
                    { ctx, _ -> ctx.header(name) }
                }
                val cookieParam : ((Context, JsonNode) -> Any?)? = it.getAnnotation(CookieParam::class.java)?.value?.let { name ->
                    { ctx, _ -> ctx.cookie(name) }
                }
                val queryParam : ((Context, JsonNode) -> Any?)? = it.getAnnotation(QueryParam::class.java)?.value?.let { name ->
                    { ctx, _ -> ctx.queryParam(name) }
                }
                val bodyParam : ((Context, JsonNode) -> Any?)? = it.getAnnotation(BodyParam::class.java)?.let { _ ->
                    { _, tree -> mapper.convertValue(tree, it.type) }
                }

                val bodyItemParam : (Context, JsonNode) -> Any? = { _, tree -> mapper.convertValue(tree.get(it.name), it.type) }

                if(bodyParam != null) {
                    openApiDoc.body(it.type)
                } else
                    if(bodyItemParam != null) {
                        openApiDoc.param(DocumentedParameter("path", it.name, it.type), isRepeatable = false, applyUpdates = null)
                    }

                contextParam ?: headerParam ?: cookieParam ?: queryParam ?: bodyParam ?: bodyItemParam
            }

            val response = when (method.returnType) {
                Void::class.java ->  null
                CompletableFuture::class.java -> {
                    (method.returnType.genericSuperclass as ParameterizedType).actualTypeArguments[0] as Class<*>
                }
                else -> method.returnType
            }

            if(response != null) {
                document().result("200", response)
            }

            val isFuture = method.returnType == CompletableFuture::class.java


            app.addHandler(httpMethod, mainPath.value + subPath.value, documented(openApiDoc) { context ->
                val tree = mapper.readTree(context.bodyAsInputStream())
                val values = parameters.map { it.invoke(context, tree) }
                val result = method.invoke(serviceClass, values)
                if(isFuture) {
                    context.result(result as CompletableFuture<*>)
                } else {
                    context.result(mapper.writeValueAsBytes(result))
                }
            }, setOf())
        }
    }
}
