package com.metriql.jdbc

import java.sql.CallableStatement
import java.sql.Connection
import java.sql.Savepoint
import java.util.Properties
import java.util.concurrent.Executor

class MetriqlConnection(private val proxyConnection: Connection) : Connection {
    private fun compileSql(sql: String): String {
        return sql
    }

    override fun <T : Any?> unwrap(iface: Class<T>) = proxyConnection.unwrap(iface)
    override fun isWrapperFor(iface: Class<*>) = proxyConnection.isWrapperFor(iface)
    override fun close() = proxyConnection.close()
    override fun createStatement() = MetriqlStatement()
    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int) = MetriqlStatement(resultSetType, resultSetConcurrency)
    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int) =
        MetriqlStatement(resultSetType, resultSetConcurrency, resultSetHoldability)

    override fun prepareStatement(sql: String) = MetriqlPreparedStatement(sql)
    override fun prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int) = MetriqlPreparedStatement(sql, resultSetType, resultSetConcurrency)
    override fun prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int) =
        MetriqlPreparedStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability)

    override fun prepareStatement(sql: String, autoGeneratedKeys: Int) = MetriqlPreparedStatement(sql, autoGeneratedKeys = autoGeneratedKeys)
    override fun prepareStatement(sql: String, columnIndexes: IntArray?) = MetriqlPreparedStatement(sql, columnIndexes = columnIndexes)
    override fun prepareStatement(sql: String, columnNames: Array<out String>?) = MetriqlPreparedStatement(sql, columnNames = columnNames)
    override fun prepareCall(sql: String): CallableStatement? = proxyConnection.prepareCall(compileSql(sql))
    override fun prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int) = proxyConnection.prepareCall(compileSql(sql), resultSetType, resultSetConcurrency)
    override fun prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int) =
        proxyConnection.prepareCall(compileSql(sql), resultSetType, resultSetConcurrency, resultSetHoldability)

    override fun nativeSQL(sql: String?) = proxyConnection.nativeSQL(sql)
    override fun setAutoCommit(autoCommit: Boolean) = run { proxyConnection.autoCommit = autoCommit }
    override fun getAutoCommit() = proxyConnection.autoCommit
    override fun commit() = proxyConnection.commit()
    override fun rollback() = proxyConnection.rollback()
    override fun rollback(savepoint: Savepoint?) = proxyConnection.rollback(savepoint)
    override fun isClosed() = proxyConnection.isClosed
    override fun getMetaData() = proxyConnection.metaData
    override fun setReadOnly(readOnly: Boolean) = run { proxyConnection.isReadOnly = readOnly }
    override fun isReadOnly() = proxyConnection.isReadOnly
    override fun setCatalog(catalog: String?) = run { proxyConnection.catalog = catalog }
    override fun getCatalog(): String = proxyConnection.catalog
    override fun setTransactionIsolation(level: Int) = run { proxyConnection.transactionIsolation = level }
    override fun getTransactionIsolation() = proxyConnection.transactionIsolation
    override fun getWarnings() = proxyConnection.warnings
    override fun clearWarnings() = proxyConnection.clearWarnings()
    override fun getTypeMap() = proxyConnection.typeMap
    override fun setTypeMap(map: MutableMap<String, Class<*>>?) = run { proxyConnection.typeMap = typeMap }
    override fun setHoldability(holdability: Int) = run { proxyConnection.holdability = holdability }
    override fun getHoldability() = proxyConnection.holdability
    override fun setSavepoint() = proxyConnection.setSavepoint()
    override fun setSavepoint(name: String?) = run { proxyConnection.setSavepoint(name) }
    override fun releaseSavepoint(savepoint: Savepoint?) = proxyConnection.releaseSavepoint(savepoint)
    override fun createClob() = proxyConnection.createClob()
    override fun createBlob() = proxyConnection.createBlob()
    override fun createNClob() = proxyConnection.createNClob()
    override fun createSQLXML() = proxyConnection.createSQLXML()
    override fun isValid(timeout: Int) = proxyConnection.isValid(timeout)
    override fun setClientInfo(name: String?, value: String?) = run { proxyConnection.setClientInfo(name, value) }
    override fun setClientInfo(properties: Properties?) = run { proxyConnection.clientInfo = properties }
    override fun getClientInfo(name: String?) = proxyConnection.getClientInfo(name)
    override fun getClientInfo() = proxyConnection.getClientInfo()
    override fun createArrayOf(typeName: String?, elements: Array<out Any>?) = proxyConnection.createArrayOf(typeName, elements)
    override fun createStruct(typeName: String?, attributes: Array<out Any>?) = proxyConnection.createStruct(typeName, attributes)
    override fun setSchema(schema: String?) = proxyConnection.setSchema(schema)
    override fun getSchema() = proxyConnection.schema
    override fun abort(executor: Executor?) = proxyConnection.abort(executor)
    override fun setNetworkTimeout(executor: Executor?, milliseconds: Int) = proxyConnection.setNetworkTimeout(executor, milliseconds)
    override fun getNetworkTimeout() = proxyConnection.networkTimeout
}
